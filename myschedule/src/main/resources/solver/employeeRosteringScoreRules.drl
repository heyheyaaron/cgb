/*
 * Copyright 2019 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package solver;
    dialect "java"
import com.example.domain.zuoxi.bean.Shift
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder
import java.time.temporal.ChronoUnit
import java.time.Duration
import com.example.domain.zuoxi.bean.Employee
import com.example.domain.zuoxi.bean.EmployeeAvailability
import com.example.enums.AvailabilityType
global HardSoftScoreHolder scoreHolder;

rule "one employee can not work in the same day"
when
    $s : Shift(
                employeeId != null,
                $employeeId: employeeId,
                $startDate: startTime.toLocalDate(),
                $id:id)
    Shift(
            employeeId == $employeeId,
            $startDate == startTime.toLocalDate(),
            id>$id)
then
    scoreHolder.penalize(kcontext);
    //scoreHolder.addHardConstraintMatch(kcontext,-11);
    //System.out.println("one employee can not work in same day");
 end

rule "Break between non-consecutive shifts is at least 12 hours"
when
    $s : Shift(
            employeeId != null,
            $employeeId : employeeId,
            $leftEndDateTime: endTime)
    Shift(
            employeeId == $employeeId,
            $leftEndDateTime <= endTime,
            $leftEndDateTime.until(startTime, ChronoUnit.HOURS) < 12,
            this!=$s)
then
    //scoreHolder.addHardConstraintMatch(kcontext,-7);
    scoreHolder.penalize(kcontext);
    //System.out.println("Break between non-consecutive shifts is at least 12 hours");
end

rule "at most work 22 days"
    when
        Employee($id:id)
        //$s : Shift(employeeId == $id, $startDateTime : startTime)
        Number($shiftCount:intValue > 22) from accumulate(
            $other : Shift(
                employeeId == $id//, $shiftStart : startTime,
                //$shiftEnd : endTime
            ),
            count($other)
            //$totalMinutes : sum(Duration.between($shiftStart, $shiftEnd).toMinutes())
        )
    then
        System.out.println($shiftCount);
        scoreHolder.penalize(kcontext);
end

rule "Unavailable time slot for an employee"
    when
        $availability: EmployeeAvailability(
                state == AvailabilityType.UNAVAILABLE.getType(),
                $employeeId : employeeId,
                $startDateTime : startDateTime,
                $endDateTime : endDateTime)
        Shift(employeeId == $employeeId,
            $startDateTime <= endTime,
            $endDateTime >= startTime)
    then
        scoreHolder.penalize(kcontext);
end

rule "Desired time slot for an employee"
    when
        $availability: EmployeeAvailability(
                state == AvailabilityType.DESIRED.getType(),
                $employeeId : employeeId,
                $startDateTime : startDateTime,
                $endDateTime : endDateTime)
        Shift(employeeId == $employeeId,
            $startDateTime <= endTime,
            $endDateTime >= startTime)
    then
        scoreHolder.reward(kcontext);
end

rule "Undesired time slot for an employee"
    when
        $availability: EmployeeAvailability(
                state == AvailabilityType.UNDESIRED.getType(),
                $employeeId : employeeId,
                $startDateTime : startDateTime,
                $endDateTime : endDateTime)
        Shift(employeeId == $employeeId,
            $startDateTime <= endTime,
            $endDateTime >= startTime)
    then
        scoreHolder.penalize(kcontext);
end

rule "No more than 3 consecutive shifts"
    when
        Shift(
                $employeeId : employeeId,
                $firstStartDate : startTime.toLocalDate())
        Shift(
                employeeId == $employeeId,
                $firstStartDate.plusDays(1) == startTime.toLocalDate(),
                $secondStartDate : startTime.toLocalDate())
        Shift(
                employeeId == $employeeId,
                $secondStartDate.plusDays(1) == startTime.toLocalDate()
                )
    then
        scoreHolder.penalize(kcontext);
end
