/*
 * Copyright 2019 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package solver;
    dialect "java"
import com.example.domain.zuoxi.bean.Shift
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder
import java.time.temporal.ChronoUnit;
global HardSoftScoreHolder scoreHolder;

rule "one employee can not work in the same day"
when
    $s : Shift(
                employee != null,
                $e: employee,
                $startDateTime1: startTime,
                $id:id)
    Shift(
            employee == $e,
            $startDateTime1.getDayOfMonth() == startTime.getDayOfMonth(),
            id>$id)
then
    scoreHolder.penalize(kcontext,2);
    //scoreHolder.addHardConstraintMatch(kcontext,-11);
    //System.out.println("one employee can not work in same day");
 end

rule "Break between non-consecutive shifts is at least 12 hours"
when
    $s : Shift(
            employee != null,
            $e : employee,
            $leftEndDateTime: endTime,
            $id:id)
    Shift(
            employee == $e,
            $leftEndDateTime < startTime,
            $leftEndDateTime.until(startTime, ChronoUnit.HOURS) < 12,
            this!=$s)
then
    //scoreHolder.addHardConstraintMatch(kcontext,-7);
    scoreHolder.penalize(kcontext,2);
    //System.out.println("Break between non-consecutive shifts is at least 12 hours");
end


